#include <SoftwareSerial.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <Ticker.h>

Ticker watchdog;
int watchCounter = 0;
const char* ssid = "frank1";
const char* password = "annarieannarie";

IPAddress arduino_ip ( 192,  168,   2,  35);
IPAddress dns_ip     (  8,   8,   8,   8);
IPAddress gateway_ip ( 192,  168,   2,   2);
IPAddress subnet_mask(255, 255, 255,   0);


// Start a TCP Server on port 502

WiFiServer server(502);
WiFiClient client ;

const long interval = 500;           // interval(milliseconds)
size_t len = 50;
uint8_t sbuf[100];
uint8_t rtu_buf[100];
uint8_t rtu_len;

uint16_t calcCRC(uint8_t u8_buff_size)
{
  uint32_t tmp, tmp2, flag;
  tmp = 0xFFFF;

  for (uint8_t i = 0; i < u8_buff_size; i++)
  {
    tmp = tmp ^ rtu_buf[i];
      for (uint8_t j = 1; j <= 8; j++)
    {
      flag = tmp & 0x0001;
      tmp >>= 1;

      if (flag)
        tmp ^= 0xA001;
    }
  }
  tmp2 = tmp >> 8;
  tmp = (tmp << 8) | tmp2;
  tmp &= 0xFFFF;

  return tmp;
}
void watch(){
   watchCounter ++;
   if (watchCounter > 4){
    ESP.reset();
    }
  
  }

void setup() {
  
  Serial.begin(115200);
  WiFi.config(arduino_ip, gateway_ip, subnet_mask);
  WiFi.begin(ssid,password);
  //Serial.println("");
  //Wait for connection
  while(WiFi.status() != WL_CONNECTED) {
    delay(500);
    //Serial.print(".");
  }
  //Serial.print("Connected to "); Serial.println(ssid);
  //Serial.print("IP Address: "); Serial.println(WiFi.localIP());
 
  // Start the TCP server
  server.begin();
  pinMode(D0,OUTPUT);
  watchdog.attach(10, watch);
}

void loop() {
       bailout:
       memset(rtu_buf, 0, 50);
        memset(sbuf, 0, 50);
      if (!client.connected()) {
      client = server.available();
    }
    else{     
    
    if (client.available() > 0) {
      int readnum = 0;
      memset(sbuf, 0, 100);
      readnum = client.read(sbuf,client.available());
      
      rtu_len = sbuf[5];
      for (int i=0 ;i<readnum-6;i++){
        rtu_buf[i] = sbuf[i+6];
      }
      int value = calcCRC(rtu_len); 
      rtu_buf[rtu_len]  = (value & 0xFF00) >> 8;
      rtu_buf[rtu_len+1] = value & 0x00FF;

      if (readnum){
      Serial.flush();
      digitalWrite(D0,HIGH);
      Serial.write(rtu_buf,rtu_len + 2);
      Serial.flush();
      delay(1);
      }
      
      digitalWrite(D0,LOW);
      memset(rtu_buf, 0, 50);
      unsigned long currentMillis = millis();
      
      while(!Serial.available()) {
        yield();
        if( millis() - currentMillis  > interval){
          goto bailout;
          } 
        }
       int  i = 6;
        currentMillis = millis();
        while (Serial.available() > 0) {
          rtu_buf[i] = Serial.read();
          i ++;
          yield();
          if( millis() - currentMillis  > interval){
          goto bailout;
            } 
          
           }
           rtu_len = i- 2;
           rtu_buf[5] = rtu_len -6 ;
           rtu_buf[0] = sbuf[0];
           rtu_buf[1] = sbuf[1];
           client.flush();
           client.write((const uint8_t*)rtu_buf,rtu_len);
           
           watchCounter = 0 ;
           //Unfortunately there is a bad function overload in the library,
           //but you can just typecast the clientbuf to overcome this problem.....
           //   eg ... client.write((const uint8_t*)clientBuf, sizeof(clientBuf));
  }
 }
    }
